// Generated by CoffeeScript 1.8.0
(function() {
  $(document).ready(function() {
    clientInit();
    var dice_sound_params, piece_sound_params, randomNumber;
    window.board = new Board();
    window.rules = new Rules();
    window.bones = new Bones('.dice');
    window.socket = new Socket();
    window.game = new Game(window.board, window.rules, window.bones, window.socket);
    window.game.bones.changeSide(0, 'left');
    window.game.bones.changeSide(1, 'right');
    window.game.loadImages(function() {
      window.game.registrOnServer({
        id: randomNumber(1, 1000)
      });
      window.board.init();
      window.game.setListener('round_start', 'Game', 'takeGameData');
      window.game.listenTurn();

        $('#tbLeave').on('click' , function(){
            window.client.gameManager.leaveGame();
        });

        $('#tbThrow').on('click' , function(){
            window.client.gameManager.sendThrow();
        });

        $('#tbDraw').on('click' , function(){
            window.client.gameManager.sendDraw();
        });
      
      /*
      window.game.setListener('takeStep', 'Game', 'takeStep');
      window.game.setListener('stepBegin', 'Game', 'stepBegin');
      window.game.setListener('takeBones', 'Game', 'takeBones');
      */
      
      
      /*
       * получаем стартовые данные игры
      window.game.setListener('takeGameData' , 'Game' , 'takeGameData')
      
       * получаем шакги от соперника
      window.game.setListener('takeStep' , 'Game' , 'takeStep')
      
       * получаем указание начать ход
      window.game.setListener('stepBegin' , 'Game' , 'stepBegin')
      
       * получаем указания болтать кости 1
      window.game.setListener('takeBones' , 'Game' , 'takeBones')
       */
      window.game.setListener('finishGame', 'Game', 'endGame');
      return window.game.setListener('takeReInvite', 'Game', 'getReInvite');


    });
    randomNumber = function(min, max) {
      var rand;
      rand = min - 0.5 + Math.random() * (max - min + 1);
      return Math.round(rand);
    };
    dice_sound_params = {
      name: 'dice'
    };
    piece_sound_params = {
      name: 'piece'
    };
    return ion.sound({
      sounds: [dice_sound_params, piece_sound_params],
      path: 'sounds/',
      preload: true,
      volume: 1.0
    });
  });

}).call(this);





function clientInit() {
  // Test generate userId
        document.cookie = 'userId='+(Math.floor(Math.random()*100000))+"; path=/;";

        window.client = new Client({
            resultDialogDelay: 1000,
            reload: true,
            getUserParams: function(){return {gameType:'Main Mode'}},
            generateInviteText: function(invite){
                return 'Вас пригласил пользователь ' + invite.from.userName
                        + ' в игру ' + invite.data.gameType;
            }
        }).init();

        _generateEndGameBtn();

        function _generateEndGameBtn() {
            var div = $('<div>');
            div.attr('id', 'endGameButton');
            div.html('<span>Выйти из игры</span>');
            div.on('click', function() {
                window.client.gameManager.leaveGame();
            });
            $('body').append(div);
        }


/*
    window.client = new Client({
        game: 'backgammon',
        port: 8090,
        resultDialogDelay: 1000,
        reload: true,
        turnTime: 600,
        getUserParams: function () {
            return {gameType: 'Main Mode'}
        },
        generateInviteText: function (invite) {
            return 'Вас пригласил пользователь ' + invite.from.userName
            + ' в игру </strong>длинные нарды</strong>';
        }
    }).init();
*/

    client.on('login', function (data) {
        console.log('main;', 'login', data.userId, data.userName);
        var you = client.getPlayer();


        client.gameManager.on('time', function (data) {

        });


        client.gameManager.on('switch_player', function (data) {
            console.log('main;', 'switch_player', 'next: ', data, 'is your turn: ', data == client.getPlayer().userId);
        });


        client.on('show_profile', function (data) {
            console.log('main;', 'show_profile user:', data);
        });


//         client.gameManager.on('round_start', function(data){
//            console.log('main;','round_start, room: ', data);
//         });


//        client.gameManager.on('turn', function (data) {
//            console.log('main;','turn', data.turn, 'is your turn: ', data.user == client.getPlayer().userId);
//        });


        client.gameManager.on('round_end', function (data) {
            console.log('main;', 'round_end', data, 'your win: ', data.winner == client.getPlayer().userId);
            game.setMessage("Ожидание соперника...");
            // на всякий случай очищаем данные об игре
            game.clearGame();
            game.gamefinish = false;
        });


        client.gameManager.on('game_leave', function (data) {
            console.log('main;', 'game_leave room:', data);
            game.setMessage("<span> </span>");
            // на всякий случай очищаем данные об игре
            game.clearGame();
            game.gamefinish = false;
        });

        var userListElem = $('#userList');
        var v6chatElem = $('#v6Chat');

        var posleft = $('#gameArea').offset().left;
        var postop = $('#gameArea').offset().top;

        posleft -= 280;
        userListElem.css({
            position: 'absolute',
            left: posleft,
            top: postop
        });

        v6chatElem.css({
            position: 'absolute',
            left: posleft,
            top: postop + 320
        });

        $(window).resize(function () {
            var posleft = $('#gameArea').offset().left;
            var postop = $('#gameArea').offset().top;

            posleft -= 280;
            userListElem.css({
                left: posleft,
                top: postop
            });

            v6chatElem.css({
                left: posleft,
                top: postop + 320
            });
        });
    })

    console.log('TEST END')
}